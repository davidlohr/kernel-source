From: Eiichi Tsukata <devel@etsukata.com>
Date: Thu, 11 Jul 2019 11:35:01 +0900
Subject: x86/stacktrace: Prevent infinite loop in arch_stack_walk_user()
Git-commit: cbf5b73d162b22e044fe0b7d51dcaa33be065253
Patch-mainline: 5.3-rc1
References: git-fixes

arch_stack_walk_user() checks `if (fp == frame.next_fp)` to prevent a
infinite loop by self reference but it's not enogh for circular reference.

Once a lack of return address is found, there is no point to continue the
loop, so break out.

Fixes: 02b67518e2b1 ("tracing: add support for userspace stacktraces in tracing/iter_ctrl")
Signed-off-by: Eiichi Tsukata <devel@etsukata.com>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Link: https://lkml.kernel.org/r/20190711023501.963-1-devel@etsukata.com
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 arch/x86/kernel/stacktrace.c |    7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

--- a/arch/x86/kernel/stacktrace.c
+++ b/arch/x86/kernel/stacktrace.c
@@ -206,12 +206,9 @@ static inline void __save_stack_trace_us
 			break;
 		if ((unsigned long)fp < regs->sp)
 			break;
-		if (frame.ret_addr) {
-			trace->entries[trace->nr_entries++] =
-				frame.ret_addr;
-		}
-		if (fp == frame.next_fp)
+		if (!frame.ret_addr)
 			break;
+		trace->entries[trace->nr_entries++] = frame.ret_addr;
 		fp = frame.next_fp;
 	}
 }
